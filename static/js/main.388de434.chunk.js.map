{"version":3,"sources":["components/Cards/Cards.component.jsx","api/index.js","components/Chart/Chart.component.jsx","components/CountryPicker/CountryPicker.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Cards","data","confirmed","deaths","recovered","lastUpdate","console","log","Grid","container","spacing","justify","item","component","Card","xs","md","className","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","fetchCountries","countries","map","name","Chart","props","state","dailyData","this","setState","infected","lineChart","labels","reportDate","datasets","totalConfirmed","label","borderColor","fill","total","backgroundColor","barChart","options","legend","display","title","text","React","Component","CountryPicker","FormControl","NativeSelect","defaultValue","onChange","e","handleCountryChange","target","i","key","App","fetchedData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.388de434.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport CountUp from \"react-countup\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\n\r\n\r\nimport \"./Cards.styles.css\"\r\n\r\nconst Cards = ({ data: { confirmed, deaths, recovered, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  console.log(recovered);\r\n  return (\r\n    <Grid container spacing={3} justify=\"center\">\r\n      <Grid item component={Card} xs={12} md={3} className='card infected'>\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            Infected\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <CountUp\r\n              start={0}\r\n              end={confirmed.value}\r\n              duration={2}\r\n              separator=\",\"\r\n            />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          <Typography variant=\"body2\">\r\n            Number of COVID-19 active cases\r\n          </Typography>\r\n        </CardContent>\r\n      </Grid>\r\n      <Grid item component={Card} xs={12} md={3} className=\"card deaths\">\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            Deaths\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <CountUp\r\n              start={0}\r\n              end={deaths.value}\r\n              duration={2}\r\n              separator=\",\"\r\n            />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          <Typography variant=\"body2\">\r\n            Number of deaths\r\n          </Typography>\r\n        </CardContent>\r\n      </Grid>\r\n      <Grid item component={Card} xs={12} md={3} className=\"card recovered\">\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            Recovered\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <CountUp\r\n              start={0}\r\n              end={recovered.value}\r\n              duration={2}\r\n              separator=\",\"\r\n            />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n          <Typography variant=\"body2\">\r\n            Number of recoveries\r\n          </Typography>\r\n        </CardContent>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"http://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url\r\n\r\n  if(country) {\r\n    changeableUrl = `${url}/countries/${country}`\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, deaths, recovered, lastUpdate },\r\n    } = await axios.get(changeableUrl); // destructure\r\n\r\n    return { confirmed, deaths, recovered, lastUpdate };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`)\r\n\r\n    return countries.map(country => country.name)\r\n\r\n  } catch(error) {\r\n    console.log(error)\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport { fetchDailyData } from \"../../api\";\r\n\r\nimport \"./Chart.styles.css\";\r\n\r\nclass Chart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dailyData: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const dailyData = await fetchDailyData();\r\n    this.setState({ dailyData: dailyData });\r\n  }\r\n\r\n  render() {\r\n    const { confirmed, infected, deaths, recovered } = this.props.data;\r\n    const { country } = this.props;\r\n    const { dailyData } = this.state;\r\n    const lineChart = dailyData[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map((data) => data.reportDate),\r\n          datasets: [\r\n            {\r\n              data: dailyData.map((data) => data.totalConfirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"#3333ff\",\r\n              fill: true,\r\n            },\r\n            {\r\n              data: dailyData.map((data) => data.deaths.total),\r\n              label: \"Deaths\",\r\n              borderColor: \"red\",\r\n              backgroundColor: \"rgba(255, 0, 0, 0.7)\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n\r\n    const barChart = confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n          datasets: [\r\n            {\r\n              label: \"People\",\r\n              backgroundColor: [\r\n                \"rgba(0, 0, 255, 0.7)\",\r\n                \"rgba(0, 255, 0, 0.7)\",\r\n                \"rgba(255, 0, 0, 0.7)\",\r\n              ],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current situation in ${country}` },\r\n        }}\r\n      />\r\n    ) : null;\r\n\r\n    return <div className=\"chart\">{country ? barChart : lineChart}</div>;\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nimport \"./CountryPicker.styles.css\";\r\n\r\n// const CountryPicker = () => {\r\n//      fetchCountries().then(countries => console.log(countries))\r\n\r\n//      return <h1>CountryPicker</h1>\r\n// }\r\n\r\nclass CountryPicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      countries: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const countries = await fetchCountries();\r\n    this.setState({ countries });\r\n    console.log(this.state.countries);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"form\">\r\n        <FormControl className=\"form-control\">\r\n          <NativeSelect defaultValue='' onChange={(e) => this.props.handleCountryChange(e.target.value)} className=\"native-select\">\r\n            <option value=''>Global</option>\r\n            {this.state.countries.map((country, i) => (\r\n              <option key={i} value={country} >{country}</option>\r\n            ))}\r\n          </NativeSelect>\r\n        </FormControl>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\n\nimport Cards from \"./components/Cards/Cards.component\";\nimport Chart from \"./components/Chart/Chart.component\";\nimport CountryPicker from \"./components/CountryPicker/CountryPicker.component\";\nimport { fetchData } from \"./api\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: {},\n      country: '',\n    };\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    console.log(fetchedData)\n    this.setState({ data: fetchedData, country: country })\n  }\n\n  render() {\n    const { data, country } = this.state\n\n    return (\n      <div className=\"App\">\n        <h1 className='title'>Covid-19 Summary</h1>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}